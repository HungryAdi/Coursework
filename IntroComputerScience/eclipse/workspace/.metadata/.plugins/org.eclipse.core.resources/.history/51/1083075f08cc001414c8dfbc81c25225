
public class AdiHashtable<K, V>
{

	private int size=0;
	
	
	
	public int size () {
		return this.size;
	}
	
	public boolean isEmpty() {
		return (this.size==0);
	}
	
	//TODO: implement this
	public V get (String key) {
	
		return null;
	}
	
	//TODO: implement this
	public void put(String key, V value) {
		
	}
	
	//TODO: implement this
	public V remove (String key) {
	
		return null;
	}
	
	
	public static void main(String[] args) {
		
		AdiHashtable<String, Integer>hashtable = new AdiHashtable<String, Integer>();
		// put a bunch of integers into the hashtable
		for (int i=0; i<10000; i++) {
			Integer int1 = new Integer(i);
			hashtable.put("myinteger-"+i, int1);			
		}
		
		System.out.println("getting integer for key "+"myinteger-1234");
		Integer int2 = hashtable.get("myinteger-1234");
		System.out.println("got integer "+int2);
		
		System.out.println("getting integer for key "+"myinteger-500");
		int2 = hashtable.remove("myinteger-500");
		System.out.println("removed integer "+int2);
		
		System.out.println("check if it is still there .. ");
		int2 = hashtable.get("myinteger-500");
		System.out.println("got integer "+int2);
		
	}
	
	private class HashtableNode<String, V> {
		
		String key;
		V value;
		
		
		HashtableNode(String key, V value) {
			this.key=key;
			this.value=value;
		}
		
		//TODO: Implement this
		boolean keyMatches(String key) {
			return false;
		}
	}
}
